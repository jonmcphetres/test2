[["index.html", "Msc Applied Statistics Overview 0.1 What is this web page? 0.2 Learning outcomes 0.3 Course Structure 0.4 What do I need for this module? 0.5 Schedule and Timetable", " Msc Applied Statistics Dr Jonathon McPhetres 2021-05-12 Overview Welcome to Applied Statistics in Psychology at Durham University. Term 1 Module Leader:Dr. Jonathon McPhetres Email:jonathon.mcphetres@durham.ac.uk Office hours: TBD 0.1 What is this web page? This is our “textbook” for the course. This page will document all of the code, examples, and activities we use during the lectures and during the tutorial sessions. It is designed to be a simple reference point and codebook. Every activity and exercise will be documented here. 0.2 Learning outcomes By the end of this term, you will: Be familiar with R-based computing and data management Be able to conduct and report basic statistical analyses Be able to create a reproducible report in APA style using R-markdown 0.3 Course Structure Each week will follow the same struture. There will be a brief pre-lecture assignment that you will bring to the lecture. The lecture will cover theory and a demonstration of the relevant techniques and assign a practical exercise for you to complete on your own time. During the tutorial, we will go over the practical exercise step-by-step. 1. Pre-lecture assignment Prior to the lecture, you will be asked to complete a small (~5 min) assignment. Please bring the results to class. This exercise is important in identifying what you do and don’t know so that you have reference point when evaluating what you’ve learned throughout this course. 2. Lecture The lecture takes place on Monday at 11-1 each week in the computer lab. During the lecture, we will discuss theoretical and practical considerations for a given procedure. We will also go over a demonstration of that procedure and the practical exercise will be assigned. 3. Practical Exercise This is a hands-on activity to apply the skills you learned during the lecture. This will be assigned at the end of each lecture and should be completed prior to the tutorial session. Please set aside a couple hours each week to work on the practical exercise. They should get easier as you go along, but they will take time. 4. Tutorial Session The tutorial session takes place on Friday from 1-3pm in the computer lab. During the tutorial session, we will go through the practical exercise step-by-step and solve any issues you may have encountered. 0.4 What do I need for this module? For this module, you will need some basic computer experience, a computer program, and one data file. 1. Basic computer experience. You need to know how to download and save files, change file formats, install programs, and generally operate your own computer. This can be on Windows, Mac, or Linux, or any system you are familiar with. But this course does not provide basic computer support. Similarly, there will often be questions or issues that you encounter and, like anything, this course will require a level of independent problem solving ability. You are encouraged to consult outside sources such as Stackoverflow, StatsExchange, and Google in order to problem solve and expand your programming and analysis capabilities. 2. R (and R-studio). You will need both R and RStudio. Please download these and install them on your computer. R: RStudio: 3. A data file. We will use one dataset for the whole term. It is available on the DUO page for this course or you can downlaod it here: 0.5 Schedule and Timetable Each session will yield a new chapter in this textbook, accessible via the menu on the left-hand side. Week 1. Introduction and R basics Week 2. Descriptive statistics Week 3. Reproducible Reporting with R Markdown Week 4. Power Analysis Week 5. Data Visualisation Week 6. Introduction to inference Week 7. Linear Models Part 1 Week 8. Linear Models Part 2 Week 9. Within-subjects designs Week 10. Principal Components Analysis "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 1. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 1.1: Here is a nice figure! "],["next-steps.html", "Chapter 2 Next steps", " Chapter 2 Next steps The next step in the process is… "],["next-chapter.html", "Chapter 3 Next Chapter", " Chapter 3 Next Chapter This is the next chapter I’m going to allow error messages for this tutorial: knitr::opts_chunk$set(error = TRUE) data.frame(3,4,5) ## X3 X4 X5 ## 1 3 4 5 R is simple: you tell it to do something and it does it. 5+5 ## [1] 10 We can save that information to an object for later use by using the assignment operator answer &lt;- 5+5 And then if we want to see the answer, we must tell R to print the contents of that value: answer ## [1] 10 More complicated operations require packages. These packages are installed within R. You only need to install a package once, but whenever you want to use it you must load the library. #install.packages(&quot;dplyr) To load a package: library(dplyr) It’s probably best to keep these all at the beginning of the markdown file. Let’s make a data frame again and save it to an object called df. df &lt;- data.frame(id = c(1,2,3), x = c(3,4,5), y = c(6,7,8)) Now let’s view the object df: df ## id x y ## 1 1 3 6 ## 2 2 4 7 ## 3 3 5 8 or View(df) We can do some things with this data. For example, we could calculate a new variable: m = x+y ## Error in eval(expr, envir, enclos): object &#39;x&#39; not found But notice that script doesn’t work. That’s because we don’t have an object called ‘x’ or ‘y’. In our environment, we only have an object called df. Within df we have ‘columns’ called ‘x’ and ‘y’ so we must tell R where these are using the $ operator: df$x ## [1] 3 4 5 So, if we want to do some math with these variables, we have to write the equation differently: m = df$x + df$y One more thing. You’ll notice it created a new value called ‘m’ in our environment. This isn’t very useful because we want ‘m’ to go into our existing dataset ‘df’, right? So we must tell R to put m into df, again using the $ operator: df$m = df$x + df$y Now you’ll see that df has 4 variables (instead of just 3). Let’s check our data frame and make sure it worked: df ## id x y m ## 1 1 3 6 9 ## 2 2 4 7 11 ## 3 3 5 8 13 When you’re ready to print some results to a table, use the Flextable package. library(flextable) ## ## Attaching package: &#39;flextable&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## compose It will make print-ready tables in Word. flextable::flextable(df) idxym13692471135813 #render the book with bookdown::render_book(&quot;index.Rmd&quot;) and them commit. "]]
